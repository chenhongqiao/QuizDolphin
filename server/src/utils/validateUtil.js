class DataValidate {
  static validateQuestion(question) {
    if (!question.context || typeof question.type !== 'string' || typeof question.points !== 'number'
    || !question.answer || typeof question.quizId !== 'string') {
      return false;
    }

    if (question.type !== 'single choice' && question.type !== 'multiple choice' && question.type !== 'short response'
    && question.type !== 'matching' && question.type !== 'fill in the blanks') {
      return false;
    }

    if (question.type === 'single choice') {
      if (!Array.isArray(question.options) || typeof question.context !== 'string' || typeof question.answer !== 'string') {
        return false;
      }
      let includeAnswer = false;
      for (let index = 0; index < question.options.length; index += 1) {
        if (typeof question.options[index] !== 'string') {
          return false;
        }
        if (question.answer === question.options[index]) {
          includeAnswer = true;
        }
      }
      if (!includeAnswer) {
        return false;
      }
    } else if (question.type === 'multiple choice') {
      if (!Array.isArray(question.options) || typeof question.context !== 'string' || !Array.isArray(question.answer)) {
        return false;
      }
      for (let index = 0; index < question.answer.length; index += 1) {
        if (typeof question.answer[index] !== 'string') {
          return false;
        }
      }
      const answerSet = new Set(question.answer);
      for (let index = 0; index < question.options.length; index += 1) {
        if (typeof question.options[index] !== 'string') {
          return false;
        }
        if (answerSet.has(question.options[index])) {
          answerSet.delete(question.options[index]);
        }
      }
      if (answerSet.size !== 0) {
        return false;
      }
    } else if (question.type === 'short response') {
      if (typeof question.context !== 'string' || typeof question.answer !== 'string') {
        return false;
      }
    } else if (question.type === 'matching') {
      if (typeof question.context !== 'string' || !Array.isArray(question.answer)
      || !Array.isArray(question.leftcol) || !Array.isArray(question.rightcol)) {
        return false;
      }
      if (question.leftcol.length !== question.rightcol.length
      || question.answer.length !== question.rightcol.length) {
        return false;
      }
      const answerSet = new Set(question.answer);
      for (let index = 0; index < question.rightcol.length; index += 1) {
        if (typeof question.rightcol[index] !== 'string') {
          return false;
        }
        if (typeof question.leftcol[index] !== 'string') {
          return false;
        }
        if (typeof question.answer[index] !== 'string') {
          return false;
        }
        if (answerSet.has(question.rightcol[index])) {
          answerSet.delete(question.rightcol[index]);
        }
      }
      if (answerSet.size !== 0) {
        return false;
      }
    } else if (question.type === 'fill in the blanks') {
      if (!Array.isArray(question.context) || !Array.isArray(question.answer)
      || !Array.isArray(question.options)) {
        return false;
      }
      if (question.context.length !== question.options.length + 1
      || question.options.length !== question.answer.length) {
        return false;
      }
      for (let index = 0; index < question.context.length; index += 1) {
        if (typeof question.context[index] !== 'string') {
          return false;
        }
      }
      for (let index = 0; index < question.options.length; index += 1) {
        if (typeof question.answer[index] !== 'string' || !Array.isArray(question.options[index])) {
          return false;
        }
        let includeAnswer = false;
        for (let lindex = 0; lindex < question.options[index].length; lindex += 1) {
          if (typeof question.options[index][lindex] !== 'string') {
            return false;
          }
          if (question.options[index][lindex] === question.answer[index]) {
            includeAnswer = true;
          }
        }
        if (!includeAnswer) {
          return false;
        }
      }
    }
    return true;
  }

  static validateQuizInfo(quizInfo) {
    if (typeof quizInfo.quizName !== 'string'
    || typeof quizInfo.duration !== 'number'
    || typeof quizInfo.questionCount !== 'number') {
      return false;
    }
    if (quizInfo.questionCount < 1 || quizInfo.duration < 1) {
      return false;
    }
    return true;
  }

  // eslint-disable-next-line max-len
  static validateQuizData(email, questions, answers, duration, attemptId, quizId, quizName, userName) {
    // Logic check on questions and answers are not performed
    // since QuizData are generated by backend.
    if (typeof email !== 'string' || !Array.isArray(questions) || !Array.isArray(answers) || typeof userName !== 'string'
    || typeof duration !== 'number' || typeof attemptId !== 'string' || typeof quizId !== 'string' || typeof quizName !== 'string') {
      return false;
    }
    return true;
  }

  static validateProgress(version, responses, types, attemptId, email, qindex) {
    if (typeof version !== 'number' || !Array.isArray(responses) || !Array.isArray(types)
    || typeof attemptId !== 'string' || typeof email !== 'string' || typeof qindex !== 'number') {
      return false;
    }
    if (responses.length !== types.length) {
      return false;
    }
    for (let index = 0; index < types.length; index += 1) {
      if (types[index] === 'single choice' || types[index] === 'short response') {
        if (typeof responses[index] !== 'string') {
          return false;
        }
      } else if (types[index] === 'multiple choice' || types[index] === 'matching' || types[index] === 'fill in the blanks') {
        if (!Array.isArray(responses[index])) {
          return false;
        }
        for (let rindex = 0; rindex < responses[index].length; rindex += 1) {
          if (responses[index][rindex] && typeof responses[index][rindex] !== 'string') { return false; }
        }
      }
    }
    return true;
  }

  static validateUserInfo(userInfo) {
    if (typeof userInfo.email !== 'string' || typeof userInfo.name !== 'string'
    || (userInfo.role !== 'user' && userInfo.role !== 'admin') || typeof userInfo.password !== 'string') {
      return false;
    }
    return true;
  }

  // eslint-disable-next-line max-len
  static validateQuizResult(score, questions, results, totalPoints, attemptId, email, quizId, quizName, userName) {
    if (typeof score !== 'number' || !Array.isArray(questions)
    || !Array.isArray(results) || typeof totalPoints !== 'number' || typeof attemptId !== 'string'
    || typeof email !== 'string' || typeof quizId !== 'string' || typeof quizName !== 'string' || typeof userName !== 'string') {
      return false;
    }
    return true;
  }

  static validateQuestionResult(response, answer, score, questionId, points) {
    if (typeof questionId !== 'string' || (typeof response !== 'string' && !Array.isArray(response))
    || (typeof answer !== 'string' && !Array.isArray(answer)) || typeof score !== 'number' || typeof points !== 'number') {
      return false;
    }
    return true;
  }
}

module.exports = DataValidate;
